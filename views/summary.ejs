<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sklep</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="order-edit-view">
        <h2>Edycja zamówienia</h2>
        
        <!-- Formularz edycji zamówienia -->
        <form id="edit-order-form">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
            
            <label for="phone">Numer telefonu:</label>
            <input type="text" id="phone" name="phone" required>
            
            <label for="username">Nazwa użytkownika:</label>
            <input type="text" id="username" name="username" required>
    
            <h3>Produkty w zamówieniu:</h3>
            <div id="order-items">
                <!-- Produkty będą tu generowane dynamicznie -->
            </div>
            
            <button type="submit">Zapisz zmiany</button>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const orderId = window.location.pathname.split('/')[2];
            const orderData = await getOrderDetails(orderId);
            populateOrderForm(orderData);
});

async function getProductDetails(productId) {
    try {
        const response = await fetch(`/products/${productId}`);
        if (!response.ok) {
            throw new Error('Błąd podczas pobierania danych zamówienia');
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Błąd:", error);
    }
}

async function getOrderDetails(orderId) {
    try {
        const response = await fetch(`/orders/${orderId}`);
        if (!response.ok) {
            throw new Error('Błąd podczas pobierania danych zamówienia');
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Błąd:", error);
    }
}

async function populateOrderForm(orderData) {
    // Wypełnij dane kontaktowe
    document.getElementById('email').value = orderData.email;
    document.getElementById('phone').value = orderData.phone;
    document.getElementById('username').value = orderData.username;

    // Wypełnij produkty w zamówieniu
    const orderItemsContainer = document.getElementById('order-items');
    orderItemsContainer.innerHTML = ''; // Wyczyść poprzednie produkty

    // Pobierz szczegóły produktów asynchronicznie
    for (const item of orderData.orderItems) {
        const productDiv = document.createElement('div');
        productDiv.classList.add('order-item');

        try {
            // Pobierz szczegóły produktu
            const product = await getProductDetails(item.id_produktu);

            productDiv.innerHTML = `
                <label for="product-${item.id_produktu}">${product.nazwa}</label> <!-- Wstawienie nazwy produktu -->
                <input type="number" id="product-${item.id_produktu}" value="${item.liczba_sztuk}" min="1">
            `;
        } catch (error) {
            console.error('Błąd podczas pobierania szczegółów produktu:', error);
            productDiv.innerHTML = `
                <label for="product-${item.id_produktu}">Błąd ładowania produktu</label>
                <input type="number" id="product-${item.id_produktu}" value="${item.liczba_sztuk}" min="1">
            `;
        }

        orderItemsContainer.appendChild(productDiv);
    }

    // Dodaj event listener do formularza
    const form = document.getElementById('edit-order-form');
    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const updatedOrder = await getUpdatedOrder(orderData.id_zamowienia);
        await saveOrderChanges(updatedOrder);
    });
}

function getUpdatedOrder(orderId) {
    const email = document.getElementById('email').value;
    const phone = document.getElementById('phone').value;
    const username = document.getElementById('username').value;

    const orderItems = [];
    const orderItemsElements = document.querySelectorAll('.order-item');
    
    orderItemsElements.forEach(itemDiv => {
        const productId = itemDiv.querySelector('input').id.split('-')[1];
        const quantity = parseInt(itemDiv.querySelector('input').value, 10);
        orderItems.push({ id_produktu: productId, liczba_sztuk: quantity });
    });

    return {
        id_zamowienia: orderId,
        email,
        phone,
        username,
        orderItems
    };
}

async function saveOrderChanges(updatedOrder) {
    try {
        const response = await fetch(`/orders/${updatedOrder.id_zamowienia}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedOrder)
        });

        if (response.ok) {
            alert('Zamówienie zostało zaktualizowane');
            // Można dodać jakąś logikę, aby przekierować lub zaktualizować UI
        } else {
            alert('Błąd podczas zapisywania zmian');
        }
    } catch (error) {
        console.error("Błąd:", error);
        alert('Wystąpił błąd');
    }
}
    </script>
</body>
</html>
